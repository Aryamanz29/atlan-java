/* SPDX-License-Identifier: Apache-2.0 */
import net.ltgt.gradle.errorprone.errorprone

val jarPath = "$rootDir/build/libs"

val sdkVersion = providers.gradleProperty("VERSION_NAME").get()

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath("io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0")
    }
}

repositories {
    mavenCentral()
}

plugins {
    id("java-library")
    id("jvm-test-suite")
    id("maven-publish")
    id("signing")
    id("jacoco")
    id("io.freefair.lombok") version "6.3.0"
    id("com.diffplug.spotless") version "6.4.0"
    id("net.ltgt.errorprone") version "2.0.2"
    id("com.github.kt3k.coveralls") version "2.12.0"
    id("biz.aQute.bnd.builder") version "6.1.0"
    id("org.ajoberstar.git-publish") version "3.0.1"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("com.adarshr.test-logger") version "3.2.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    errorprone("com.google.errorprone:error_prone_core:2.20.0")
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
    api("com.fasterxml.jackson.core:jackson-databind:2.15.2")
    api("org.slf4j:slf4j-api:2.0.7")
    api("co.elastic.clients:elasticsearch-java:8.8.2")
    api("org.freemarker:freemarker:2.3.32")
    api("org.apache.commons:commons-csv:1.10.0")
    implementation("io.github.classgraph:classgraph:4.8.160")
    testImplementation("com.aventrix.jnanoid:jnanoid:2.0.0")
    testImplementation("org.testng:testng:7.8.0")
    testImplementation("ch.qos.logback:logback-classic:1.4.8")
    testImplementation("com.github.tomakehurst:wiremock:2.27.2")
}

tasks.jar {
    manifest {
        attributes(
            "Implementation-Title" to providers.gradleProperty("POM_NAME").get(),
            "Implementation-Version" to providers.gradleProperty("VERSION_NAME").get(),
            "Implementation-Vendor" to providers.gradleProperty("VENDOR_NAME").get(),
            "Bundle-SymbolicName" to providers.gradleProperty("POM_ARTIFACT_ID").get(),
            "Export-Package" to "com.atlan.*")
        archiveVersion.set(sdkVersion)
    }
    destinationDirectory.set(file(jarPath))
    archiveFileName.set("atlan-java-$sdkVersion.jar")
}

tasks.shadowJar {
    destinationDirectory.set(file(jarPath))
    archiveFileName.set("atlan-java-$sdkVersion-jar-with-dependencies.jar")
    configurations = listOf(project.configurations.runtimeClasspath.get())
}

tasks.withType<JavaCompile> {
    options.release.set(project.java.targetCompatibility.majorVersion.toInt())
    options.compilerArgs.addAll(listOf("-Werror", "-Xlint:all", "-Xlint:-options", "-Xlint:-processing"))
    options.encoding = "UTF-8"

    options.errorprone {
        // This check causes warnings with autogenerated Javadoc strings.
        disable("InvalidParam")

        // Some methods in autogen'd files (defined via overrides) lack a summary. Should be trivial
        // to fix by adding the missing summaries.
        disable("MissingSummary")

        // This check is disabled because multiple nested classes may have the same name in a given
        // file. (In particular the EqualsAndHashCode from Lombok will create this in many places.)
        disable("SameNameButDifferent")

        // This check is disabled because of how we have object-based inheritance setup, and the
        // fact that every asset will have an 'attributes' and 'relationshipAttributes' field.
        disable("HidingField")

        // This check is disabled because we're self-assuring that the enums are immutable.
        disable("ImmutableEnumChecker")

        // This check is disabled as we won't use this annotation
        disable("InlineMeSuggester")

        // Disabled as we know how it works and it does what we want
        disable("StringSplitter")

        // This check is disabled because of how we have object-based inheritance setup, and the
        // inability of Lombok to generate Overrides on its generated builder-related methods.
        //disable("MissingOverride")
        // This check is disabled because of how Lombok works with SuperBuilder and the
        // AtlanObject base class not actually containing any members, yet Lombok requiring
        // the annotation here for all inherited classes to work.
        //disable("UnusedVariable")

        // Disable checks in generated code since Lombok does some things that error-prone
        // may not like (and may even cause error-prone itself to fail out with exceptions
        // during its analysis process). For example, combining @SuperBuilder and @Singular
        // annotations...
        disableWarningsInGeneratedCode.set(true)
    }
}

lombok {
    version.set("1.18.24")
}

tasks.delombok {
    // empty format option, otherwise the default is to use pretty formatting which overrides
    // options Lombok config options and does not add generated annotations.
    format = emptyMap()
}

testing {
    suites {
        val test by getting(JvmTestSuite::class) {
            useTestNG()
            dependencies {
                implementation(project())
                implementation("org.testng:testng:7.8.0")
                implementation("ch.qos.logback:logback-classic:1.4.8")
                implementation("com.github.tomakehurst:wiremock:2.27.2")
            }
            sources {
                java {
                    setSrcDirs(listOf("src/test/java"))
                }
            }
        }
        val liveTest by registering(JvmTestSuite::class) {
            useTestNG()
            targets {
                all {
                    testTask.configure {
                        filter {
                            excludeTestsMatching("com.atlan.model.assets.*")
                            excludeTestsMatching("com.atlan.loop.*")
                        }
                        testLogging.showStandardStreams = true
                    }
                }
            }
            dependencies {
                implementation(project())
                implementation("com.aventrix.jnanoid:jnanoid:2.0.0")
                implementation("org.testng:testng:7.8.0")
                implementation("ch.qos.logback:logback-classic:1.4.8")
            }
            sources {
                java {
                    setSrcDirs(listOf("src/liveTest/java"))
                }
            }
        }
        val generate by registering(JvmTestSuite::class) {
            useTestNG()
            targets {
                all {
                    testTask.configure {
                        testLogging.showStandardStreams = true
                    }
                }
            }
            dependencies {
                implementation(project())
                implementation("org.testng:testng:7.8.0")
                implementation("ch.qos.logback:logback-classic:1.4.8")
            }
            sources {
                java {
                    setSrcDirs(listOf("src/generate/java"))
                }
            }
        }
    }
}

tasks.named("check") {
    dependsOn(testing.suites["test"])
}

spotless {
    java {
        palantirJavaFormat("2.9.0")
        removeUnusedImports()
        licenseHeaderFile("../LICENSE_HEADER")
    }
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(true) // coveralls plugin depends on xml format report
        html.required.set(true)
    }
}

coveralls {
    jacocoReportPath = "build/reports/jacoco/test/jacocoTestReport.xml"
}

gitPublish {
    repoUri.set("https://github.com/atlanhq/atlan-java.git")
    branch.set("gh-pages")
    sign.set(false) // disable commit signing

    contents {
        from(tasks.javadoc) {
            into(".")
        }
    }
}

jacoco {
    // test code instrumentation for Java 18
    toolVersion = "0.8.8"
}

tasks.create<Zip>("buildZip") {
    into("java/lib") {
        from(tasks.shadowJar)
    }
}
