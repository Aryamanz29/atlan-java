/* SPDX-License-Identifier: Apache-2.0 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
    }
}

plugins {
    id "java-library"
    id "jvm-test-suite"
    id "maven-publish"
    id "signing"
    id "jacoco"
    id "io.freefair.lombok" version "6.3.0"
    id "com.diffplug.spotless" version "6.4.0"
    id "net.ltgt.errorprone" version "2.0.2"
    id "com.github.kt3k.coveralls" version "2.12.0"
    id "biz.aQute.bnd.builder" version "6.1.0"
    id "org.ajoberstar.git-publish" version "3.0.1"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.adarshr.test-logger" version "3.2.0"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group = GROUP
version = VERSION_NAME

tasks.withType(JavaCompile) {
    options.release = project.targetCompatibility.majorVersion as Integer

    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Xlint:-processing"
    options.encoding = "UTF-8"

    options.errorprone {
        // This check causes warnings with autogenerated Javadoc strings.
        disable("InvalidParam")

        // Some methods in autogen'd files (defined via overrides) lack a summary. Should be trivial
        // to fix by adding the missing summaries.
        disable("MissingSummary")

        // This check is disabled because multiple nested classes may have the same name in a given
        // file. (In particular the EqualsAndHashCode from Lombok will create this in many places.)
        disable("SameNameButDifferent")

        // This check is disabled because of how we have object-based inheritance setup, and the
        // fact that every asset will have an 'attributes' and 'relationshipAttributes' field.
        disable("HidingField")

        // This check is disabled because we're self-assuring that the enums are immutable.
        disable("ImmutableEnumChecker")

        // This check is disabled as we won't use this annotation
        disable("InlineMeSuggester")

        // This check is disabled because of how we have object-based inheritance setup, and the
        // inability of Lombok to generate Overrides on its generated builder-related methods.
        //disable("MissingOverride")
        // This check is disabled because of how Lombok works with SuperBuilder and the
        // AtlanObject base class not actually containing any members, yet Lombok requiring
        // the annotation here for all inherited classes to work.
        //disable("UnusedVariable")

        // Disable checks in generated code since Lombok does some things that error-prone
        // may not like (and may even cause error-prone itself to fail out with exceptions
        // during its analysis process). For example, combining @SuperBuilder and @Singular
        // annotations...
        disableWarningsInGeneratedCode = true
    }
}

compileJava {
    options.compilerArgs << "-Werror"
}

configurations {
    numaflow {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    mavenCentral()
}

dependencies {
    errorprone group: "com.google.errorprone", name: "error_prone_core", version: "2.14.0"
    errorproneJavac group: "com.google.errorprone", name: "javac", version:"9+181-r4173-1"
    api group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.14.1"
    api group: "org.slf4j", name: "slf4j-api", version: "1.7.32"
    api group: "co.elastic.clients", name: "elasticsearch-java", version: "8.5.1"
    numaflow group: "io.numaproj.numaflow", name: "numaflow-java", version: "+"
    numaflow "io.netty:netty-transport-native-epoll:4.1.79.Final:linux-x86_64"
    testImplementation group: 'org.freemarker', name: 'freemarker', version: '2.3.32'
    testImplementation group: 'org.testng', name: 'testng', version: '7.7.0'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2'
}

jar {
    manifest {
        attributes("Implementation-Title": POM_NAME,
                   "Implementation-Version": VERSION_NAME,
                   "Implementation-Vendor": VENDOR_NAME,
                   "Bundle-SymbolicName": POM_ARTIFACT_ID,
                   "Export-Package": "com.atlan.*")

        archiveVersion = VERSION_NAME
    }
}

lombok {
    version = "1.18.24"
}

delombok {
    // empty format option, otherwise the default is to use pretty formatting which overrides
    // options Lombok config options and does not add generated annotations.
    format = [:]
}

apply from: "deploy.gradle"

testing {
    suites {
        test {
            useTestNG()
            dependencies {
                implementation project
                implementation group: 'org.testng', name: 'testng', version: '7.7.0'
                implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
                implementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2'
            }
            sources {
                java {
                    srcDirs = ["src/test/java"]
                }
            }
        }
        liveTest(JvmTestSuite) {
            useTestNG()
            targets {
                all {
                    testTask.configure {
                        filter {
                            excludeTestsMatching "com.atlan.model.assets.*"
                            excludeTestsMatching "com.atlan.loop.*"
                        }
                        testLogging.showStandardStreams = true
                    }
                }
            }
            dependencies {
                implementation project
                implementation group: 'org.testng', name: 'testng', version: '7.7.0'
                implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
            }
            sources {
                java {
                    srcDirs = ["src/liveTest/java"]
                }
            }
        }
        generate(JvmTestSuite) {
            useTestNG()
            targets {
                all {
                    testTask.configure {
                        testLogging.showStandardStreams = true
                    }
                }
            }
            dependencies {
                implementation project
                implementation group: 'org.freemarker', name: 'freemarker', version: '2.3.32'
                implementation group: 'org.testng', name: 'testng', version: '7.7.0'
                implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.11'
                implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.9.0'
            }
            sources {
                java {
                    srcDirs = ["src/generate/java"]
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.test)
}

spotless {
    java {
        palantirJavaFormat("2.9.0")
        removeUnusedImports()
        licenseHeaderFile('LICENSE_HEADER')
    }
}

shadowJar {
    archiveClassifier = 'jar-with-dependencies'
    configurations = [project.configurations.runtimeClasspath,project.configurations.numaflow]
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}

coveralls {
    jacocoReportPath "build/reports/jacoco/test/jacocoTestReport.xml"
}

gitPublish {
    repoUri = 'https://github.com/atlanhq/atlan-java.git'
    branch = 'gh-pages'
    sign = false // disable commit signing

    contents {
        from(javadoc) {
            into '.'
        }
    }
}
jacoco
{
    // test code instrumentation for Java 18
    toolVersion = "0.8.8"
}
